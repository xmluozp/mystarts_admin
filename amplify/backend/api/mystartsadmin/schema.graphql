# @auth(rules: [{allow:owner, operations: [create,update,delete]}])

# **********************************************************************************
# *****************************************    Phase 1  ****************************
# **********************************************************************************

# ========================================= table
# CUD: triggerred from dynamoDB
# type Tablecount
# 	@model
# 	@auth(
# 		rules: [
# 			{ allow: public, provider: iam, operations: [read] }
# 			{ allow: groups, groups: ["normal", "mentor"], operations: [read] }
# 			{ allow: groups, groups: ["admin"] }
# 		]
# 	) {
# 	tableName: String!
# 	filter: String
# 	count: Int
# }

# ========================================= user
type User
	@model(mutations: { create: "registerUser", update: "updateUser" })
	@key(
		name: "UserOrderbyCreatedAt"
		fields: ["pk", "createdAt"]
		queryField: "listUserOrderbyCreatedAt"
	)
	@auth(
		rules: [
			{ allow: public, provider: iam, operations: [read] }
			{ allow: groups, groups: ["normal", "mentor"], operations: [read] }
			{ allow: groups, groups: ["admin"] }
			{ allow: owner, ownerField: "id" }
		]
	) {
	id: ID!
	email: String!
	familyName: String!
	givenName: String!
	avatar: Picture #强行规定大小，就不用担心preview，节省空间成本
	# organizations: [UserOrganization] @connection(keyName: "orgByUser", fields:["id"])
	# conversations: [ConversationUser] @connection(keyName: "convByUser", fields:["id"])
	# pollitems: [UserBallot] @connection(keyName: "pollitemByUser", fields:["id"])
	# messages: [Message] @connection(keyName: "messagesByUser", fields:["id"])
	# videos: [Video] @connection(keyName: "videoByUser", fields:["id"])  #pk
	# friends: [User] @connection(keyName: "friendByUser", fields:["id"])  #pk
	# watchs: [User] @connection(keyName: "watchByUser", fields:["id"])  #pk

	# for sorting
	pk: String!
	createdAt: AWSDateTime!
}

# ========================================= voting
type Votetopic
	@model
	@key(
		name: "VotetopicOrderbyCreatedAt"
		fields: ["pk", "createdAt"]
		queryField: "listVotetopicOrderbyCreatedAt"
	)
	@auth(
		rules: [
			{ allow: public, provider: iam, operations: [read] }
			{ allow: groups, groups: ["normal", "mentor"], operations: [read] }
			{ allow: groups, groups: ["admin"] }
			{ allow: owner, ownerField: "owners" }
		]
	)
	 {
	id: ID!
	title: String!
	description: String
	voteitems: [Voteitem] @connection(keyName: "itemByVotetopic",  fields: ["id"])

	# for sorting
	pk: String!
	createdAt: AWSDateTime!

	owners: [String]
}

# children table of votetopic
type Voteitem
	@model
	@key(
		name: "itemByVotetopic"
		fields: ["votetopicID", "sortNumber"]
		queryField: "listVoteitemByVotetopic"
	)
	@auth(
		rules: [
			{ allow: public, provider: iam, operations: [read] }
			{ allow: groups, groups: ["normal", "mentor"], operations: [read] }
			{ allow: groups, groups: ["admin"] }
			{ allow: owner, ownerField: "owners" }
		]
	) {
	id: ID!
	title: String!
	votetopicID: ID!
	votetopic: Votetopic @connection(fields: ["votetopicID"])
	
	isActive: Boolean

	# for sorting
	sortNumber: Int!
	owners: [String]
}

# type Pollperiod
# 	@model
# 	# @key(
# 	# 	name: "PollperiodByCreatedAt"
# 	# 	fields: ["pk", "createdAt"]
# 	# 	queryField: "listPollperiodByCreatedAt"
# 	# )
# 	@auth(
# 		rules: [
# 			{ allow: public, provider: iam, operations: [read] }
# 			{ allow: groups, groups: ["normal", "mentor"], operations: [read] }
# 			{ allow: groups, groups: ["admin"] }
# 			{ allow: owner, ownerField: "owners" }
# 		]
# 	) {
# 	id: ID!
# 	title: String!
# 	description: String
# 	fromDate: AWSDateTime!
# 	toDate: AWSDateTime!
# 	# polltopics: [Polltopic] @connection(name: "PollperiodTopic")

# 	# for sorting
# 	pk: String!
# 	createdAt: AWSDateTime!

# 	owners: [String]
# }

# type Polltopic
# 	@model
# 	# @key(
# 	# 	name: "PolltopicBySortNumber"
# 	# 	fields: ["pk", "sortNumber"]
# 	# 	queryField: "listPolltopicBySortNumber"
# 	# )
# 	@auth(
# 		rules: [
# 			{ allow: public, provider: iam, operations: [read] }
# 			{ allow: groups, groups: ["normal", "mentor"], operations: [read] }
# 			{ allow: groups, groups: ["admin"] }
# 			{ allow: owner, ownerField: "owners" }
# 		]
# 	) {
# 	id: ID!
# 	title: String!
# 	description: String
# 	# pollperiod: Pollperiod @connection(name: "PollperiodTopic")
# 	# pollitems: [Pollitem] @connection(name: "PolltopicItem")

# 	# for sorting
# 	pk: String!
# 	sortNumber: Int

# 	owners: [String]
# }

# type Pollitem
# 	@model
# 	# @key(
# 	# 	name: "PollitemBySortNumber"
# 	# 	fields: ["pk", "sortNumber"]
# 	# 	queryField: "listPollitemBySortNumber"
# 	# )
# 	@auth(
# 		rules: [
# 			{ allow: public, provider: iam, operations: [read] }
# 			{ allow: groups, groups: ["normal", "mentor"], operations: [read] }
# 			{ allow: groups, groups: ["admin"] }
# 			{ allow: owner, ownerField: "owners" }
# 		]
# 	) {
# 	id: ID!
# 	title: String!
# 	votecount: Int!
# 	fixcount: Int #admin cheating
# 	isSuggestion: Boolean
# 	# polltopic: Polltopic @connection(name: "PolltopicItem")
# 	# users: [UserBallot] @connection(name: "PollitemUser")

# 	# for sorting
# 	pk: String!
# 	sortNumber: Int

# 	owners: [String]
# }

# # mid table for: user-pollitem
# type UserBallot
# 	@model(queries: null)
# 	@auth(
# 		rules: [
# 			{ allow: public, provider: iam, operations: [read] }
# 			{ allow: groups, groups: ["normal", "mentor"], operations: [read] }
# 			{ allow: groups, groups: ["admin"] }
# 		]
# 	) {
# 	id: ID!
# 	userID: ID!
# 	# user: User! @connection(name: "UserPollitem")
# 	PollitemID: ID!
# 	# Pollitem: Pollitem! @connection(name: "PollitemUser")
# }

# # **********************************************************************************
# # ***************************************** Phase 2 & 3 ****************************
# # **********************************************************************************

# # ========================================= organization and inventation

# type Invitation
# 	@model
# 	@auth(
# 		rules: [
# 			{ allow: public, provider: iam, operations: [read] }
# 			{ allow: groups, groups: ["normal", "mentor"], operations: [read] }
# 			{ allow: groups, groups: ["admin"] }
# 			{ allow: owner, ownerField: "owners" }
# 		]
# 	) {
# 	id: ID!
# 	# dafaultFriends: [User] @connection #试一下这样存的是不是ID
# 	# fromUser: User @connection
# 	inviteToken: String!
# }

# # 组织
# type Organization
# 	@model
# 	# @key(
# 	# 	name: "OrganizationByCreatedAt"
# 	# 	fields: ["pk", "createdAt"]
# 	# 	queryField: "listOrganizationByCreatedAt"
# 	# )
# 	@auth(
# 		rules: [
# 			{ allow: public, provider: iam, operations: [read] }
# 			{ allow: groups, groups: ["normal", "mentor"], operations: [read] }
# 			{ allow: groups, groups: ["admin"] }
# 			{ allow: owner, ownerField: "owners" }
# 		]
# 	) {
# 	id: ID!
# 	name: String!
# 	brief: String
# 	logo: Picture
# 	bp: S3Object
# 	tags: [String] # 可以手动输入
# 	# members: [UserOrganization] @connection(name: "OrgUser")

# 	# for sorting
# 	pk: String!
# 	createdAt: AWSDateTime!

# 	owners: [String]
# }

# # m2m
# type UserOrganization @model(queries: null) 
# 	@auth(
# 		rules: [
# 			{ allow: groups, groups: ["admin"] }
# 			{ allow: owner, ownerField: "userID" }
# 		]
# 	) {
# 	id: ID!
# 	userID: ID!
# 	# user: User! @connection(name: "UserOrg")
# 	organizationID: ID!
# 	# organization: Organization! @connection(name: "OrgUser")
# }

# Tag是搜索用的，纯文本，这个仅作为下拉列表管理用
type Tag
	@model
	@key(
		name: "TagOrderbySortNumber"
		fields: ["pk", "sortNumber"]
		queryField: "listTagOrderbySortNumber"
	)
	@auth(
		rules: [
			{ allow: public, provider: iam, operations: [read] }
			{ allow: groups, groups: ["normal", "mentor"], operations: [read] }
			{ allow: groups, groups: ["admin"] }
			{ allow: owner, ownerField: "owners" }
		]
	) {
	id: ID!
	name: String!
	isActive: Boolean

	# for sorting
	pk: String!
	sortNumber: Int

	owners: [String]
}
# ========================================= social
# 留言
# 既然是社交，应该做成像linkedin那样的。实时和留言不要分太清。
# https://www.ctolib.com/aws-samples-aws-appsync-chat.html

# virtual entity, used to connect user with user for messaging
# type Conversation
# 	@model(
# 		mutations: { create: "createConvo" }
# 		queries: { get: "getConvo" }
# 		subscriptions: null
# 	)
# 	@auth(rules: [{ allow: owner, ownerField: "owners" }]) {
# 	id: ID!
# 	# messages: [Message] @connection(name: "ConvoMsgs", sortField: "createdAt")
# 	# users: [ConversationUser] @connection(name: "ConvUser")

# 	# for sorting
# 	createdAt: AWSDateTime!

# 	# used to set auth
# 	owners: [String!]!
# }

# # virtual entity, no @key, will be sorted from Conversation
# type Message
# 	@model(subscriptions: null, queries: null)
# 	@auth(rules: [{ allow: owner, ownerField: "authorId" }]) {
# 	id: ID!
# 	content: String!
# 	authorId: String!
# 	# author: User @connection(name: "UserMessages", keyField: "authorId")
# 	messageConversationId: ID!
# 	# conversation: Conversation! @connection(name: "ConvoMsgs")

# 	# for sorting
# 	createdAt: AWSDateTime!

# 	owners: [String] # redundant, currently not used
# }

# # virtual entity, m2m
# type ConversationUser @model(queries: null) 
# 	@auth(
# 		rules: [
# 			{ allow: groups, groups: ["admin"] }
# 			{ allow: owner, ownerField: "userID" }
# 		]
# 	) {
# 	id: ID!
# 	userID: ID!
# 	# user: User! @connection(name: "UserConv")
# 	conversationID: ID!
# 	# conversation: Conversation! @connection(name: "ConvUser")
# }

# # type Subscription {
# # 	onCreateConvoLink(convoLinkUserId: ID!): ConvoLink
# # 		@aws_subscribe(mutations: ["createConvoLink"])
# # 	onCreateMessage(messageConversationId: ID!): Message
# # 		@aws_subscribe(mutations: ["createMessage"])
# # }

# # ======================= notification
# type Notification
# 	@model
# 	# @key(
# 	# 	name: "NotificationByCreatedAt"
# 	# 	fields: ["pk", "createdAt"]
# 	# 	queryField: "listNotificationByCreatedAt"
# 	# )
# 	@auth(
# 		rules: [
# 			{ allow: public, provider: iam, operations: [read] }
# 			{ allow: groups, groups: ["normal", "mentor"], operations: [read] }
# 			{ allow: groups, groups: ["admin"] }
# 			{ allow: owner, ownerField: "owners" }
# 		]
# 	) {
# 	id: ID!
# 	content: String!
# 	notificationType: String! # announce/remind/message
# 	action: String! # message, follow, newevent
# 	receiverID: ID!
# 	# receiver: User! @connection(fields: ["receiverID"])
# 	# sender: User @connection # who triggers the notification
# 	isRead: Boolean # move to redis later

# 	# for sorting
# 	pk: String!
# 	createdAt: AWSDateTime!

# 	owners: [String]
# }

# # type NotificationSubscribe @model {
# # 	id: ID!
# # 	action: String
# # 	user: User
# # }

# # 视频
# # 视频是model. 前期主要是外链
# type Video
# 	@model
# 	# @key(
# 	# 	name: "VideoByCreatedAt"
# 	# 	fields: ["pk", "createdAt"]
# 	# 	queryField: "listVideoByCreatedAt"
# 	# )
# 	@auth(
# 		rules: [
# 			{ allow: public, provider: iam, operations: [read] }
# 			{ allow: groups, groups: ["normal", "mentor"], operations: [read] }
# 			{ allow: groups, groups: ["admin"] }
# 			{ allow: owner, ownerField: "owners" }
# 		]
# 	) {
# 	id: ID!
# 	name: String!
# 	brief: String
# 	url: String!
# 	preview: Picture
# 	# author: User @connection(name: "UserVideo")
# 	tags: [Tag]

# 	# for sorting
# 	pk: String!
# 	createdAt: AWSDateTime!

# 	owners: [String]
# }

# # ======================= 用来存储图片，bp之类的
type Picture {
	name: String
	image: S3Object!
	preview: S3Object
}

# # 生成preview 需要后台自动
type S3Object {
	bucket: String!
	region: String!
	key: String!
}

# ======================= 暂时不用
# mentor, normal,
# type Role @model {
#     id: ID!
#     permissions: [String!]
#     #fk
#     users: [User] @connection(name: "UserRole")
# }

# type Blog @model {
#   id: ID!
#   name: String!
#   posts: [Post] @connection(keyName: "byBlog", fields: ["id"])
# }

# type Post @model @key(name: "byBlog", fields: ["blogID"]) {
#   id: ID!
#   title: String!
#   blogID: ID!
#   blog: Blog @connection(fields: ["blogID"])
#   comments: [Comment] @connection(keyName: "byPost", fields: ["id"])
# }

# type Comment @model @key(name: "byPost", fields: ["postID", "content"]) {
#   id: ID!
#   postID: ID!
#   post: Post @connection(fields: ["postID"])
#   content: String!
# }
